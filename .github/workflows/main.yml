name: DevSecOps Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Install dependencies
        run: yarn
        
      - name: Run linter
        run: npm run lint

  build:
    name: Build App
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Build project
        run: npm run build

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          docker build -t hello-world-backend:latest .
          docker save hello-world-backend:latest -o image.tar

      - name: Upload image.tar
        uses: actions/upload-artifact@v4
        with:
          name: image.tar
          path: .

  test:
    name: Run Tests (Unit + E2E)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Run unit tests with coverage
        run: npm run test:cov

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/

      - name: Run e2e tests with coverage
        run: npm run test:e2e:cov

      - name: Upload e2e test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-e2e
          path: coverage-e2e/

  trivy-fs:
    name: Trivy FS Scan (Source Code)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner in fs mode
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy plugin install github.com/umax/trivy-plugin-sonarqube
          trivy fs --format=json --output=trivy.json --exit-code=1 --ignore-unfixed=true .
          trivy sonarqube trivy.json > trivy-fs.json

      - name: Upload trivy-fs.json
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs.json
          path: .

  trivy-image:
    name: Trivy Image Scan
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v3

      - name: Download image.tar
        uses: actions/download-artifact@v4
        with:
          name: image.tar
          path: .

      - name: Load docker image
        run: docker load -i image.tar

      - name: Run Trivy vulnerability scanner in image mode
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy plugin install github.com/umax/trivy-plugin-sonarqube
          trivy image --format=json --output=trivy.json --exit-code=1 --ignore-unfixed=true hello-world-backend:latest
          trivy sonarqube trivy.json > trivy-image.json

      - name: Upload trivy-image.json
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image.json
          path: .

  sonar:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [test, trivy-fs, trivy-image]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: coverage/

      - name: Download e2e test coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-e2e
          path: coverage-e2e/

      - name: Upload trivy-fs.json
        uses: actions/download-artifact@v4
        with:
          name: trivy-fs.json
          path: trivy/

      - name: Upload trivy-image.json
        uses: actions/download-artifact@v4
        with:
          name: trivy-image.json
          path: trivy/

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          args: >
            -Dsonar.externalIssuesReportPaths=trivy/trivy-fs.json,trivy/trivy-image.json
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
