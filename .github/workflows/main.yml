name: DevSecOps Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Install dependencies
        run: yarn
        
      - name: Run linter
        run: npm run lint

  build:
    name: Build App
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Build project
        run: npm run build

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          docker build -t hello-world-backend:latest .
          docker save hello-world-backend:latest -o image.tar

      - name: Upload image.tar
        uses: actions/upload-artifact@v4
        with:
          name: image.tar
          path: ./image.tar

  test:
    name: Run Tests (Unit + E2E)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Run unit tests with coverage
        run: npm run test:cov

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage
          path: coverage/

      - name: Run e2e tests with coverage
        run: npm run test:e2e:cov

      - name: Upload e2e test coverage
        uses: actions/upload-artifact@v4
        with:
          name: e2e-coverage
          path: coverage-e2e/

  trivy-fs:
    name: Trivy FS Scan (Source Code)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@0.28.0
        run: 
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy.json'
          exit-code: '1'
          ignore-unfixed: true
        run: trivy plugin install github.com/umax/trivy-plugin-sonarqube && trivy sonarqube trivy.json > sonarqube.json


  trivy-image:
    name: Trivy Image Scan
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v3

      - name: Download image.tar
        uses: actions/download-artifact@v4
        with:
          name: image.tar
          path: ./image.tar

      - name: Load docker image
        run: docker load < image.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'hello-world-backend:latest'
          format: 'json'
          exit-code: '1'
          ignore-unfixed: true
          scan-type: 'image'
          output: trivy.json
        run: trivy plugin install github.com/umax/trivy-plugin-sonarqube && trivy sonarqube trivy.json > sonarqube.json

  sonar:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [test, trivy-fs, trivy-image]
    steps:
      - uses: actions/checkout@v3

      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        with:
          name: unit-coverage
          path: coverage/

      - name: Download e2e test coverage
        uses: actions/download-artifact@v4
        with:
          name: e2e-coverage
          path: coverage-e2e/

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=your_project_key
            -Dsonar.organization=your_org
            -Dsonar.sources=src
            -Dsonar.tests=src,e2e
            -Dsonar.test.inclusions=**/*.spec.ts
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info,coverage-e2e/lcov.info
            -Dsonar.host.url=https://sonarcloud.io
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
